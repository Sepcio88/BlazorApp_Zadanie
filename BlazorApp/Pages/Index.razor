@page "/"
@layout MainLayout


<MudGrid>
    <MudItem xs="12" md="5">
        <MudPaper Elevation="1" Class="pa-4" Style="background: radial-gradient(97.57% 210.75% at 0.9% 2.98%, rgba(255, 255, 255, 0.4) 0%, rgba(255, 255, 255, 0) 100%);height:50vh;">
            <UsersContainer Users="@users" OnUserDroppedBack="HandleUserDroppedBack" />
        </MudPaper>
    </MudItem>
    <MudItem xs="12" md="7">
        <MudPaper Elevation="1" Class="pa-4" Style="background: radial-gradient(97.57% 210.75% at 0.9% 2.98%, rgba(255, 255, 255, 0.4) 0%, rgba(255, 255, 255, 0) 100%);height:90vh;">
            <GroupsContainer Groups="@groups" OnUserDropped="HandleUserDropped" />
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private List<User> users = new List<User>
    {
        new User { Id = 1, Name = "Adam Kowalski", City = "Radom", ImageUrl = "images/akowalski.jpg" },
        new User { Id = 2, Name = "Piotr Piotrowski", City = "Warszawa", ImageUrl = "images/ppiotrowski.jpg" },
    };

    private List<GroupM> groups = new List<GroupM>
    {
        new GroupM("Group 1")
        {
            Id = 1,
            Members = new List<User>
            {
                new User { Id = 3, Name = "Magda Nowakowska", City = "Kraków", ImageUrl = "images/mnowakowska.jpg" },
            }
        },
        new GroupM("Group 2")
        {
            Id = 2,
            Members = new List<User>
            {
                new User { Id = 4, Name = "Jan Nowak", City = "Katowice", ImageUrl = "images/jnowak.jpg" },
            }
        },
    };

    private async Task HandleUserDropped((User user, int groupId) details)
    {
        users.RemoveAll(u => u.Id == details.user.Id);

        var group = groups.FirstOrDefault(g => g.Id == details.groupId);

        bool userAlreadyInGroup = group?.Members.Any(u => u.Id == details.user.Id) ?? false;

        if (group != null && !userAlreadyInGroup)
        {
            group.Members.Add(details.user);

            await InvokeAsync(StateHasChanged);
        }
    }

    private void HandleUserDroppedBack(User user)
    {
        var group = groups.FirstOrDefault(g => g.Members.Any(m => m.Id == user.Id));
        if (group != null)
        {
            group.Members.RemoveAll(m => m.Id == user.Id); 
        }

        if (!users.Any(u => u.Id == user.Id))
        {
            users.Add(user); 
        }

        StateHasChanged(); 
    }

}
